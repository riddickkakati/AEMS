/*
Dark Object Subtraction method for calculating Surface Reflectance for Sentinel 2 Imagery.
Method implemented: Dark Object Subtraction {Pat S.ChavezJr.(1988)}. 
Guide: http://eoscience.esa.int/landtraining2017/files/materials/D4P1b2I.pdf
Developed by: Riddick Kakati
Inputs required: Sentinel 2 image collection, Geometry (Study area), Starting time of study time period, Ending time of study time period, Maximum cloud Cover to be considered for images
*/
exports.Sentinel_SR_DOS_esa_method= function(S2,geometry,startdate,enddate,cc,eee){
  var filter = S2.filterBounds(geometry).filterDate(startdate,enddate).filterMetadata('CLOUDY_PIXEL_PERCENTAGE','less_than',cc);//.select(ee.List.sequence(0,12));
  function maskS2clouds(image) {
  var qa = image.select('QA60');

  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

  return image.updateMask(mask);
  }
  filter = filter.map(maskS2clouds);
  filter= filter.select(ee.List.sequence(0,12));
  print('Original Image:',filter);
  var count=filter.size();
    //If 0 elements error
  var errorgen= ee.Number(count);
  print(errorgen,'Number of images to be processed:');
  var a= ee.String('Error: No cloud free images in the period.');
  var b= ee.String('Warning: Too long date range. App might not responding.');
  var c= ee.String('Generation successful!');
  var returnObj = ee.Algorithms.If(errorgen.eq(0), a , ee.Algorithms.If(errorgen.gte(12), b, c));
  if (eee) {
      var panel= ui.Panel({
      style: {
        position: 'bottom-center',
        padding: '5px'
      }
    });
    var title= ui.Label({
      value: returnObj.getInfo(),
      style: {
        fontSize: '14px',
        fontWeight: 'bold',
        margin: '0px',
        whiteSpace: 'pre',
        textAlign: 'center'
      }
    });
    panel.add(title);
    Map.add(panel);
  }
  //end 0 elements error
  if (errorgen.getInfo()) {
    var filterlist= filter.toList(count);
    var imagearray= ee.List.sequence(0,count.subtract(1));
    
    var divide10000= function(image){
      image= image.toFloat();
      return image.divide(10000);
    };
    
    var TOAReflectance= filter.map(divide10000);
    
    var TOARadiancecalc= function(image){
      image=image;
      var bandnames= image.bandNames();
      var length= ee.Number(bandnames.length());
      var bands1= ee.List.sequence(0,7);
      var bands2= ee.List.sequence(8,8);
      var bands3= ee.List.sequence(9,12);
      var TOARadianceband0to7= function(i){
         i= ee.Number(i).toInt();
        var j=i.add(1);
        var reflectancevalue= image.select(i);
        var ESUN= ee.Image.constant(image.get(j.format('SOLAR_IRRADIANCE_B%s')));
        var sunzen = image.get('MEAN_SOLAR_ZENITH_ANGLE');
        var cossunzen = ee.Image.constant(ee.Number(sunzen).cos());
        var pie= ee.Image.constant(ee.Number(Math.PI));
        var GranuleID= ee.String(image.get('GRANULE_ID'));
        var namelist= GranuleID.split('');
        var year= ee.Number.parse(namelist.slice(-15,-11).join());
        var month= namelist.slice(-11,-9);
        var monthex0= ee.Algorithms.If(ee.Number.parse(month.get(0)).eq(0),ee.Number.parse(month.get(1)),ee.Number.parse(month.join()));
        var day= namelist.slice(-9,-7);
        var dayex0= ee.Algorithms.If(ee.Number.parse(day.get(0)).eq(0),ee.Number.parse(day.get(1)),ee.Number.parse(day.join()));
        var date= ee.Date.fromYMD(year,monthex0,dayex0);
        var daynumber= ee.Number.parse(date.format('DDD'));
        var costerm= ee.Number.expression('0.0172*(daynumber-2)',{
          daynumber: daynumber
        });
        costerm= costerm.cos();
        var earthsundistancecalc= ee.Number.expression('1-(0.01673*costerm)',{
          costerm: costerm
        });
        var earthsundistanceimage= ee.Image.constant(earthsundistancecalc);
        return reflectancevalue.expression(
          '(reflectancevalue*ESUN*cossunzen)/(pie*d*d)',{
            reflectancevalue: reflectancevalue,
            ESUN: ESUN,
            cossunzen: cossunzen,
            pie: pie,
            d: earthsundistanceimage
          });
      };
      var TOARadianceband8A= function(i){
         i= ee.Number(i).toInt();
        var reflectancevalue= image.select(i);
        var ESUN= ee.Image.constant(image.get(i.format('SOLAR_IRRADIANCE_B%sA')));
        var sunzen = image.get('MEAN_SOLAR_ZENITH_ANGLE');
        var cossunzen = ee.Image.constant(ee.Number(sunzen).cos());
        var pie= ee.Image.constant(ee.Number(Math.PI));
        var GranuleID= ee.String(image.get('GRANULE_ID'));
        var namelist= GranuleID.split('');
        var year= ee.Number.parse(namelist.slice(-15,-11).join());
        var month= namelist.slice(-11,-9);
        var monthex0= ee.Algorithms.If(ee.Number.parse(month.get(0)).eq(0),ee.Number.parse(month.get(1)),ee.Number.parse(month.join()));
        var day= namelist.slice(-9,-7);
        var dayex0= ee.Algorithms.If(ee.Number.parse(day.get(0)).eq(0),ee.Number.parse(day.get(1)),ee.Number.parse(day.join()));
        var date= ee.Date.fromYMD(year,monthex0,dayex0);
        var daynumber= ee.Number.parse(date.format('DDD'));
        var costerm= ee.Number.expression('0.0172*(daynumber-2)',{
          daynumber: daynumber
        });
        costerm= costerm.cos();
        var earthsundistancecalc= ee.Number.expression('1-(0.01673*costerm)',{
          costerm: costerm
        });
        var earthsundistanceimage= ee.Image.constant(earthsundistancecalc);
        return reflectancevalue.expression(
          '(reflectancevalue*ESUN*cossunzen)/(pie*d*d)',{
            reflectancevalue: reflectancevalue,
            ESUN: ESUN,
            cossunzen: cossunzen,
            pie: pie,
            d: earthsundistanceimage
          });
      };
      var TOARadianceband9to12= function(i){
         i= ee.Number(i).toInt();
        var reflectancevalue= image.select(i);
        var ESUN= ee.Image.constant(image.get(i.format('SOLAR_IRRADIANCE_B%s')));
        var sunzen = image.get('MEAN_SOLAR_ZENITH_ANGLE');
        var cossunzen = ee.Image.constant(ee.Number(sunzen).cos());
        var pie= ee.Image.constant(ee.Number(Math.PI));
        var GranuleID= ee.String(image.get('GRANULE_ID'));
        var namelist= GranuleID.split('');
        var year= ee.Number.parse(namelist.slice(-15,-11).join());
        var month= namelist.slice(-11,-9);
        var monthex0= ee.Algorithms.If(ee.Number.parse(month.get(0)).eq(0),ee.Number.parse(month.get(1)),ee.Number.parse(month.join()));
        var day= namelist.slice(-9,-7);
        var dayex0= ee.Algorithms.If(ee.Number.parse(day.get(0)).eq(0),ee.Number.parse(day.get(1)),ee.Number.parse(day.join()));
        var date= ee.Date.fromYMD(year,monthex0,dayex0);
        var daynumber= ee.Number.parse(date.format('DDD'));
        var costerm= ee.Number.expression('0.0172*(daynumber-2)',{
          daynumber: daynumber
        });
        costerm= costerm.cos();
        var earthsundistancecalc= ee.Number.expression('1-(0.01673*costerm)',{
          costerm: costerm
        });
        var earthsundistanceimage= ee.Image.constant(earthsundistancecalc);
        return reflectancevalue.expression(
          '(reflectancevalue*ESUN*cossunzen)/(pie*d*d)',{
            reflectancevalue: reflectancevalue,
            ESUN: ESUN,
            cossunzen: cossunzen,
            pie: pie,
            d: earthsundistanceimage
          });
      };
      var radiance1to7= ee.ImageCollection(bands1.map(TOARadianceband0to7));
      var radiance8A= ee.ImageCollection(bands2.map(TOARadianceband8A));
      var radiance9to12= ee.ImageCollection(bands3.map(TOARadianceband9to12));
      return ((radiance1to7.merge(radiance8A)).merge(radiance9to12)).toBands();
    };
    
    var TOARadianceabsolute= ee.ImageCollection(filter.map(TOARadiancecalc));
    
    var TOARadiance= TOARadianceabsolute.map(divide10000);
    
    print('TOARadiance:', TOARadiance, 'TOAReflectance:', TOAReflectance);
    
    
    //Modify get darkobject
    
    //Function to get Histogram values as table
    var getHistData = function(image) {
      //i=ee.Number(image).toInt();
      var band=image.bandNames();
      var bandseq= ee.List.sequence(0,(band.size()).subtract(1));
      var histogramfunction= function(j){
        j=ee.Number(j).toInt();
        var j1=ee.String(band.get(j));
        var histogram = image.select(j1).reduceRegion({
        reducer: ee.Reducer.histogram({
          maxBuckets: Math.pow(2, 8), 
        }), 
        geometry: image.geometry(), 
        scale: 10, 
        maxPixels: 1e10, 
        });
       // Get the list of DN values (x-axis of the histogram)
        var dnList = ee.Array(ee.Dictionary(histogram.get(j1)).get('bucketMeans'));
       // Get the list of Counts values (y-Axis of the histogram)
        var countsList = ee.Array(ee.Dictionary(histogram.get(j1)).get('histogram'));
        var signum= countsList.signum();
        var countsnonzero= countsList.mask(signum).toList();
        var countsnonzerofirst= ee.Number(countsnonzero.get(0));
        countsList= countsList.toList();
        var index= countsList.indexOf(countsnonzerofirst);
        dnList= dnList.toList();
        var darkobject= ee.Number(dnList.get(index));
        var darkobjectnext= ee.Number(dnList.get(index.add(1)));
        var DOS= ee.Algorithms.If(darkobjectnext.subtract(darkobject).lt(ee.Number(100)),darkobject,ee.Number(0).toDouble());
        DOS= ee.Algorithms.If(darkobject.lt(ee.Number(0)),ee.Number(0).toDouble(),darkobject);
        return ee.Image.constant(DOS);
      };
    return ee.ImageCollection(bandseq.map(histogramfunction)).toBands();
    };
    
    var Darkobjects= TOARadiance.map(getHistData);
    print('Darkobjects:',Darkobjects);
    
    var ESUNcalc= function(image){
      image=image;
      var bandnames= image.bandNames();
      var length= ee.Number(bandnames.length());
      var bands1= ee.List.sequence(0,7);
      var bands2= ee.List.sequence(8,8);
      var bands3= ee.List.sequence(9,12);
      var ESUNcalc0to7= function(i){
         i= ee.Number(i).toInt();
        var j=i.add(1);
        return ee.Image.constant(image.get(j.format('SOLAR_IRRADIANCE_B%s')));
      };
      var ESUNcalc8A= function(i){
         i= ee.Number(i).toInt();
        return ee.Image.constant(image.get(i.format('SOLAR_IRRADIANCE_B%sA')));
      };
      var ESUNcalc9to12= function(i){
         i= ee.Number(i).toInt();
        return ee.Image.constant(image.get(i.format('SOLAR_IRRADIANCE_B%s')));
      };
      var ESUN1to7= ee.ImageCollection(bands1.map(ESUNcalc0to7));
      var ESUN8A= ee.ImageCollection(bands2.map(ESUNcalc8A));
      var ESUN9to12= ee.ImageCollection(bands3.map(ESUNcalc9to12));
      return ((ESUN1to7.merge(ESUN8A)).merge(ESUN9to12)).toBands();
    };
    
    var ESUN= ee.ImageCollection(filter.map(ESUNcalc));
    
    
    var Darkobjectslist= Darkobjects.toList(count);
    var ESUNlist= ESUN.toList(count);
    
    var Pathradiancecalc= function(i){
      i= ee.Number(i).toInt();
      var filterimage= ee.Image(filterlist.get(i));
      var darkobjectimage= ee.Image(Darkobjectslist.get(i));
      var esunimage= ee.Image(ESUNlist.get(i));
      var pie= ee.Image.constant(ee.List.repeat(ee.Number(Math.PI),filterimage.bandNames().length()));
      var GranuleID= ee.String(filterimage.get('GRANULE_ID'));
      var namelist= GranuleID.split('');
      var year= ee.Number.parse(namelist.slice(-15,-11).join());
      var month= namelist.slice(-11,-9);
      var monthex0= ee.Algorithms.If(ee.Number.parse(month.get(0)).eq(0),ee.Number.parse(month.get(1)),ee.Number.parse(month.join()));
      var day= namelist.slice(-9,-7);
      var dayex0= ee.Algorithms.If(ee.Number.parse(day.get(0)).eq(0),ee.Number.parse(day.get(1)),ee.Number.parse(day.join()));
      var date= ee.Date.fromYMD(year,monthex0,dayex0);
      var daynumber= ee.Number.parse(date.format('DDD'));
      var costerm= ee.Number.expression('0.0172*(daynumber-2)',{
        daynumber: daynumber
      });
      costerm= costerm.cos();
      var earthsundistancecalc= ee.Number.expression('1-(0.01673*costerm)',{
        costerm: costerm
      });
      var distance= ee.Image.constant(ee.List.repeat(earthsundistancecalc,filterimage.bandNames().length()));
      var sunzen = ee.Number(filterimage.get('MEAN_SOLAR_ZENITH_ANGLE'));
      var cossunzen = ee.Image.constant(ee.List.repeat(ee.Number(sunzen).cos(),filterimage.bandNames().length())); 
      var pathradiance= darkobjectimage.expression('DarkObject-((0.01*esun*cossunzen)/(pie*d*d))',{
        'DarkObject': darkobjectimage,
        'esun': esunimage,
        'cossunzen': cossunzen,
        'pie': pie,
        'd': distance
        });
      return pathradiance;
    };
    
    var pathradiance= imagearray.map(Pathradiancecalc);
    print('Path Radiance:',pathradiance);//0.01 Reflectance value subtracted as per Chavez et. al
    
    var TOARadiancelist= TOARadiance.toList(count);
    
    var SurfaceReflectancecalc= function(i){
      i= ee.Number(i).toInt();
      var filterimage= ee.Image(filterlist.get(i));
      var TOARadianceimage= ee.Image(TOARadiancelist.get(i));
      var pathradianceimage= ee.Image(pathradiance.get(i));
      var esunimage= ee.Image(ESUNlist.get(i));
      var pie= ee.Image.constant(ee.List.repeat(ee.Number(Math.PI),filterimage.bandNames().length()));
      ////
      var GranuleID= ee.String(filterimage.get('GRANULE_ID'));
      var namelist= GranuleID.split('');
      var year= ee.Number.parse(namelist.slice(-15,-11).join());
      var month= namelist.slice(-11,-9);
      var monthex0= ee.Algorithms.If(ee.Number.parse(month.get(0)).eq(0),ee.Number.parse(month.get(1)),ee.Number.parse(month.join()));
      var day= namelist.slice(-9,-7);
      var dayex0= ee.Algorithms.If(ee.Number.parse(day.get(0)).eq(0),ee.Number.parse(day.get(1)),ee.Number.parse(day.join()));
      var date= ee.Date.fromYMD(year,monthex0,dayex0);
      var daynumber= ee.Number.parse(date.format('DDD'));
      var costerm= ee.Number.expression('0.0172*(daynumber-2)',{
        daynumber: daynumber
      });
      costerm= costerm.cos();
      var earthsundistancecalc= ee.Number.expression('1-(0.01673*costerm)',{
        costerm: costerm
      });
      var distance= ee.Image.constant(ee.List.repeat(earthsundistancecalc,filterimage.bandNames().length()));
      var sunzen = ee.Number(filterimage.get('MEAN_SOLAR_ZENITH_ANGLE'));
      var cossunzen = ee.Image.constant(ee.List.repeat(ee.Number(sunzen).cos(),filterimage.bandNames().length())); 
      var surfacereflectance= TOARadianceimage.expression('(pie*(TOAradiance-pathradiance)*d*d)/(esun*cossunzen)',{
        'TOAradiance': TOARadianceimage,
        'pathradiance': pathradianceimage,
        'esun': esunimage,
        'cossunzen': cossunzen,
        'pie': pie,
        'd': distance
        });
      return surfacereflectance;
    };
    
    var surfacereflectance= ee.ImageCollection(imagearray.map(SurfaceReflectancecalc));
    print('Surface Reflectance:',surfacereflectance);
  
  return surfacereflectance;
  }
};